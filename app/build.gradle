apply plugin: 'idea'
apply plugin: 'com.android.application'
apply plugin: 'spoon'
apply plugin: 'hugo'


// Manifest version information!
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

project.ext.versionCode = versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
project.ext.versionName = "${versionMajor}.${versionMinor}.${versionPatch}"

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm'Z'", TimeZone.getTimeZone("UTC"))

def isTravis = "true".equals(System.getenv("TRAVIS"))
def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
        classpath 'com.jakewharton.hugo:hugo-plugin:1.1.+'
        classpath 'com.stanfy.spoon:spoon-gradle-plugin:1.0.3'
    }
}

android {
    compileSdkVersion 20
    buildToolsVersion "20.0.0"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 20

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""

        testApplicationId "co.lemonlabs.mortar.tests"
        testInstrumentationRunner "com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner"

    }
    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !isTravis
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'LICENSE.txt'
    }

    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}
dependencies {
    compile 'com.android.support:support-v4:20.0.+'

    compile 'com.squareup.mortar:mortar:0.16'
    compile 'com.squareup.flow:flow:0.7'
    compile 'com.squareup.okhttp:okhttp:2.0.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.0.0'
    compile 'com.squareup.picasso:picasso:2.3.2'
    compile 'com.squareup.retrofit:retrofit:1.6.0'

    compile 'com.netflix.rxjava:rxjava-core:0.17.4'
    compile 'com.netflix.rxjava:rxjava-android:0.17.4'

    compile 'com.squareup.dagger:dagger:1.2.1'
    provided 'com.squareup.dagger:dagger-compiler:1.2.1'
    compile 'com.jakewharton:butterknife:5.0.+'
    compile 'com.jakewharton.timber:timber:2.2.2'

    compile 'com.etsy.android.grid:library:1.0.3'

    debugCompile 'com.squareup.retrofit:retrofit-mock:1.6.0'
    debugCompile 'com.jakewharton.madge:madge:1.1.1'
    debugCompile 'com.jakewharton.scalpel:scalpel:1.1.2'
    debugCompile('com.jakewharton.espresso:espresso:1.1-r3') {
        exclude group: 'com.squareup.dagger'
    }

    androidTestCompile 'com.squareup.spoon:spoon-client:1.1.10'
}

spoon {
    debug = true
    noAnimations = true

    if (project.hasProperty('spoonClassName')) {
        className = project.spoonClassName

        if (project.hasProperty('spoonMethodName')) {
            methodName = project.spoonMethodName
        }
    }

    if (project.hasProperty('spoonTestSize')) {
        testSize = project.spoonTestSize
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def file = output.outputFile
        def newName = "ll-mortar-${variant.name}-v${project.versionName}.apk"
        output.outputFile = new File(file.parent, newName)
    }
}
